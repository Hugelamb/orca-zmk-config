/* 
 *  Created by Hugh Lam (2024)
 *
 *  orca keymap
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/ext_power.h>
 #include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

// non-standard modules
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/34.h"


// use helper macros to define left and right hand positions
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH1 LH0 RH0 RH1 

/* Global Settings */
#define QUICK_TAP_MS 175

// urob's Timeless HRM's
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

// Layer defines
#define DEF 0
#define COL 1
#define SYM 2       // Commonly used symbols
#define NAV 3       // arrow keys, PGUP/PGDN, back, forward, window swappers, 
#define FUN 4       // F keys, print screen, insert, etc.
#define SYS 5       // Board related functions, BT profiles, reset, bootloader, ext power cutoff.
// #define MOU 6
// Conditional layer change
ZMK_CONDITIONAL_LAYER(fun, NAV SYM, FUN)  // NAV + SYM => FUN

// Desktop window management and tab nav shortcuts
#define D_LT   LC(LG(LEFT))     // move desktop left
#define D_RT   LC(LG(RIGHT))    // move desktop right       
#define TAB_RT LC(TAB)          // tab switcher forward/right
#define TAB_LT LC(LS(TAB))      // tab switcher left/back
//Extra key binds
// #define SWP_POS 
// behaviour customization
&mt {
    flavor = "hold-preferred";
    tapping-term-ms = <200>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

// &led_strip {
//     chain-length = <17>;
// };

// tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
ZMK_MOD_MORPH(bs_del,
    bindings = <&kp BSPC>, <&kp DEL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
    keep-mods = <MOD_RSFT>;
)

/ {
    // behaviors {
    //     // // Swapper function (may require zmk PR#1366)
    //     // swapper: swapper {
    //     //     compatible = "zmk,behaviour-tri-state";
    //     //     #binding-cells = <0>;
    //     //     bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    //     //     ignored-key-positions = <SWP_POS>; 
    //     // };
    // // tap: backspace | lshft + tap: delete | rshft + tap: shift-delete
    //     bs_del: backspace_delete {
    //         compatible = "zmk,behavior-mod-morph";
    //         #binding-cells = <0>;
    //         bindings = <&kp BSPC>, <&kp DEL>;
    //         mods = <(MOD_LSFT|MOD_RSFT)>;
    //         keep-mods = <MOD_RSFT>;
    //     };
    // };

    // macros
    // macros {
    //     ZMK_MACRO(inv_qm,
    //         wait-ms = <10>;
    //         tap-ms = <10>;
    //         bindings
    //             = <&macro_press &kp LALT>
    //             , <&macro_tap &kp KP_N1 &kp KP_N6 &kp KP_N8>
    //             , <&macro_release &kp LALT>;
    //     )
    //     // ZMK_MACRO(alt_tabber,  // adapted from @moutis on ZMK Discord
    //     //     wait-ms = <10>;
    //     //     tap-ms = <10>;
    //     //     bindings = <&macro_press &kp LALT>    // leave ALT down to keep menu up
    //     //              , <&macro_tap &kp TAB>       // open the menu
    //     //              , <&macro_pause_for_release> // wait until key release
    //     //              , <&macro_tap &sk_at RALT>   // start timer to release ALT after timeout
    //     //              , <&macro_release &kp LALT>; // now release the initial hold
    //     // )
    // };


    // keymap visual
     /* 
          ╭───────────────────────╮         ╭───────────────────────╮
          │      0   1   2   3   4│         │ 5   6   7   8   9     │
          │     10  11  12  13  14│         │25  16  17  18  19     │
          │     20  21  22  23  24 ───╮ ╭─── 25  26  27  28  29     │
          ╰─────────────────╮  30  31 │ │ 32  33 ╭──────────────────╯
                            ╰─────────╯ ╰────────╯           
        */
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "DEF";

            bindings = <
&kp Q       &kp W       &kp E           &kp R           &kp T                   &kp Y       &kp U           &kp I           &kp O           &kp P
&hml LGUI A &hml LALT S &hml LCTRL D    &hml LSHFT F    &kp G                   &kp H       &hmr RSHFT J    &hmr LCTRL K    &hmr LALT L     &hmr LGUI SEMI   
&kp Z       &kp X       &kp C           &kp V           &kp B                   &kp N       &kp M           &kp COMMA       &kp DOT         &kp FSLH
                                        &hml LCTRL ESC  &lt NAV SPC             &lt SYM RET &bs_del
            >;
        };

        cole_layer {
            display-name = "COL_DH";
			bindings = <
&kp Q       &kp W       &kp F           &kp P           &kp B                       &kp J           &kp L        &kp U        &kp Y       &kp SEMI
&hml LGUI A &hml LALT R &hml LCTRL S    &hml LSHFT T    &kp G                       &kp M           &hmr RSHFT N &hmr LCTRL E &hmr LALT I &hmr LGUI O     
&kp Z       &kp X       &kp C           &kp D           &kp V                       &kp K           &kp H        &kp COMMA    &kp DOT     &kp FSLH
                                        &mt LCTRL ESC   &lt NAV SPC                 &lt SYM RET     &bs_del
			>;
        };

        symbol_layer {
            display-name = "SYM";
            bindings = <
&kp EXCL    &kp AT      &kp HASH        &kp DLLR        &kp PRCNT               &kp SLASH       &kp N7      &kp N8      &kp N9      &kp COMMA 
&kp PLUS    &kp EQUAL   &kp UNDER       &kp MINUS       &kp CARET               &kp N0          &kp N4      &kp N5      &kp N6      &kp DOT   
&kp SQT     &trans      &kp STAR        &kp AMPS        &kp DQT                 &kp SEMI        &kp N1      &kp N2      &kp N3      &kp SLASH 
                                        &kp BSPC        &trans                  &trans          &bs_del                               
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&kp LA(F4)  &kp TAB_LT  &kp TAB_RT      &kp LC(F4)      &kp C_VOL_UP            &kp PG_UP       &none        &kp UP       &none        &kp HOME 
&kp LCTRL   &kp LGUI    &kp LALT        &mt LSHFT TAB   &kp C_VOL_DN            &kp PG_DN       &kp LEFT     &kp DOWN     &kp RIGHT    &kp END
&none       &none       &none           &kp LS(INS)     &kp C_PP                &none           &kp DEL      &kp C_PREV   &kp C_NEXT   &none         
                                        &none           &trans                  &trans          &trans 
            >;

        };

        fun_layer {
            display-name = "FUN";
            bindings = <
&kp F1      &kp F2  &kp F3  &kp F4  &kp F5          &kp PSCRN   &none   &none   &none   &none    
&kp F6      &kp F7  &kp F8  &kp F9  &kp F10         &kp INS     &none   &none   &none   &none   
&none       &none   &none   &kp F11 &kp F12         &none       &none   &none   &none   &to SYS
                            &none   &trans          &trans      &trans 
            >;

        };

        sys_layer {
            display-name = "SYS";
            bindings = <
&bootloader &none   &none   &out OUT_BLE    &out OUT_USB        &bt BT_PRV          &bt BT_NXT          &none           &none           &sys_reset    
&none       &none   &none   &none           &none               &bt BT_SEL 0        &bt BT_SEL 1        &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    
&bt BT_DISC &none   &none   &none           &none               &ext_power EP_OFF   &ext_power EP_ON    &none           &none           &to DEF      
                            &none           &trans              &trans  &none
            >;

        };
    };
};